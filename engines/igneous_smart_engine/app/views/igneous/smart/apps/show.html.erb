<!DOCTYPE html>
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>Loading...</title>
<script type="text/javascript">

  /*
  * XMLCclRequest JavaScript Library v1.0.0
  *
  * based on contributions from Joshua Faulkenberry
  * Lucile Packard Children's Hospital at Stanford
  */
  XMLCclRequest = function(options) {
     /************ Attributes *************/

     this.onreadystatechange = function() {
        return null;
     };
     this.options = options || {};
     this.readyState = 0;
     this.responseText = "";
     this.status = 0;
     this.statusText = "";
     this.sendFlag = false;
     this.errorFlag = false;
     this.responseBody =
     this.responseXML =
     this.async = true;
     this.requestBinding = null;
     this.requestText = null;
     this.blobIn = null;

     /************** Events ***************/

     //Raised when there is an error.
     this.onerror =

     /************** Methods **************/

     //Cancels the current CCL request.
     this.abort =

     //Returns the complete list of response headers.
     this.getAllResponseHeaders =

     //Returns the specified response header.
     this.getResponseHeader = function() {
        return null;
     };

     //Assigns method, destination URL, and other optional attributes of a pending request.
     this.open = function(method, url, async) {
        if (method.toLowerCase() != "get" && method.toLowerCase() != "post") {
           this.errorFlag = true;
           this.status = 405;
           this.statusText = "Method not Allowed";
           return false;
        }
        this.method = method.toUpperCase();
        this.url = url;
        this.async = async!=null?(async?true:false):true;
        this.requestHeaders = null;
        this.responseText = "";
        this.responseBody = this.responseXML = null;
        this.readyState = 1;
        this.sendFlag = false;
        this.requestText = "";
        this.onreadystatechange();
     };

     //Sends a CCL request to the server and receives a response.
     this.send = function(param) {
        if (this.readyState != 1) {
           this.errorFlag = true;
           this.status = 409;
           this.statusText = "Invalid State";
           return false;
        }
        if (this.sendFlag) {
           this.errorFlag = true;
           this.status = 409;
           this.statusText = "Invalid State";
           return false;
        }
        this.sendFlag = true;
        this.requestLen = param.length;
        this.requestText = param;
        var uniqueId = this.url + "-" + (new Date()).getTime() + "-" + Math.floor(Math.random() * 99999);
        XMLCCLREQUESTOBJECTPOINTER[uniqueId] = this;

        window.location = "javascript:XMLCCLREQUEST_Send(\"" + uniqueId + "\"" + ")";

     };

     //Adds custom HTTP headers to the request.
     this.setRequestHeader = function(name, value) {
        if (this.readyState != 1) {
           this.errorFlag = true;
           this.status = 409;
           this.statusText = "Invalid State";
           return false;
        }
        if (this.sendFlag) {
           this.errorFlag = true;
           this.status = 409;
           this.statusText = "Invalid State";
           return false;
        }
        if (!value) { return false; }
        if (!this.requestHeaders) {
           this.requestHeaders = [];
        }
        this.requestHeaders[name] = value;
     };

    // Sets blob input.
    this.setBlobIn = function(blob) {
      this.blobIn = blob;
    };
  }

  // Needed for XMLCCLREQUEST
  XMLCCLREQUESTOBJECTPOINTER = [];
  function evaluate(x)
  {
    return eval(x);
  }

  var requestSync = new XMLCclRequest();

  function getMillenniumIntegratedAuthToken() {
    requestSync.open("GET","mp_exec_std_request", 0);
    requestSync.send('~MINE~,~{"REQUESTIN":{}}~,3202004,3202004,99999124');

    if (requestSync.status == 200) {
      var parsedJSON = JSON.parse(requestSync.responseText);

      if (parsedJSON.RECORD_DATA.STATUS.SUCCESS_IND == 1) {
        return parsedJSON.RECORD_DATA.IDENTITY_TOKEN.valueOf();
      }
    }
    return "";
  }

  function submitToken(token) {

    var oauth2BaseUrl = "<%= oauth2_base_url %>";
    if (!oauth2BaseUrl.valueOf()) {
      window.location.href = "<%= launch_url %>";
    }

    //This invokes an API provided by the authorization server, which directs
    //the user agent to its own endpoint that can signal completion of the
    //pre-authentication workflow.
    document.getElementById("loader").src = oauth2BaseUrl.valueOf()
        + "/preauth/?token="
        + encodeURI(token);
    return false;
  }

  //This method hooks and waits for the pre-authentication frame to signal completion.
  //Additional business logic should exist for the event that this never completes (perhaps) a
  //failure occurs communicating with one or more services.
  function receiveMessage(event) {
    if (event.data === "com.cerner.authorization:notification:preauthentication-complete") {
      window.location.href = "<%= launch_url %>";
    } else if (event.data.contains("com.cerner.authorization:notification:preauthentication-failure:error")) {
      window.location.href = "<%= launch_url %>";
    }
  }

  window.addEventListener("message", receiveMessage, false);

  window.onload = function() {
    var token = getMillenniumIntegratedAuthToken();

    if (token) {
      submitToken(token);
    } else {
      window.location.href = "<%= launch_url %>";
    }
  };

</script>
</head>
<body>
  <p>Loading...</p>
  <div id="iframe" style="display:block; visibility:hidden">
    <iframe name="loader" id="loader"></iframe>
  </div>
</body>
</html>
